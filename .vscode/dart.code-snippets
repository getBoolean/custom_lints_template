{
	// Place your custom_lints_template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"lint": {
		"scope": "dart",
		"prefix": "lint",
		"description": "Dart Custom Lint Definition",
		"body": [
			"import 'package:analyzer/error/listener.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"import 'package:custom_lints_template/src/lints/custom_lint_example/fixes/custom_lint_example_fix.dart';",
			"import 'package:custom_lints_template/src/lints/custom_lint_example/models/custom_lint_example_options.dart';",
			"import 'package:custom_lints_template/src/models/options_lint_rule.dart';",
			"import 'package:custom_lints_template/src/models/rule_config.dart';",
			"import 'package:custom_lints_template/src/utils/extensions.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends OptionsLintRule<$2> {",
			"  /// Creates a new instance of [OptionsLintRule]",
			"  /// based on the lint configuration.",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(",
			"    CustomLintConfigs configs,",
			"  ) : super(RuleConfig(",
			"          configs: configs,",
			"          name: lintName,",
			"          paramsParser: $2.fromMap,",
			"          problemMessage: (_) => 'This is the description of our custom lint',",
			"        ));",
			"",
			"  /// The [LintCode] of this lint rule",
			"  static const String lintName = 'custom_lint_example';",
			"",
			"  @override",
			"  Future<void> run(",
			"    CustomLintResolver resolver,",
			"    ErrorReporter reporter,",
			"    CustomLintContext context,",
			"  ) async {",
			"    final severity = config.parameters.severity;",
			"    final code = this.code.copyWith(errorSeverity: severity);",
			"    context.registry.addVariableDeclaration((node) {",
			"      ${4:// TODO: Check if the error should be reported}",
			"      reporter.reportErrorForNode(code, node);",
			"    });",
			"  }",
			"",
			"  @override",
			"  List<Fix> getFixes() => [",
			"	 // CustomLintExampleFix(config)",
			"  ];",
			"}",
			""
		],
	},
	"assist": {
		"scope": "dart",
		"prefix": "assist",
		"description": "Dart Custom Lint Assist",
		"body": [
			"import 'package:analyzer/source/source_range.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends DartAssist {",
			"  @override",
			"  Future<void> run(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    SourceRange target,",
			"  ) async {",
			"    context.registry.addVariableDeclaration((node) {",
			"      // Check that the visited node is under the cursor",
			"      if (!target.intersects(node.sourceRange)) return;",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        priority: 1,",
			"        message: '${2:Custom assist for code}',",
			"      );",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${3:// TODO: <implement change to refactor the code>}",
			"      });",
			"    });",
			"  }",
			"}",
			""
		],
	},
	"fix": {
		"scope": "dart",
		"prefix": "fix",
		"description": "Dart Custom Lint Fix",
		"body": [
			"import 'package:analyzer/error/error.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"import 'package:custom_lints_template/src/lints/custom_lint_example/models/custom_lint_example_options.dart';"
			"import 'package:custom_lints_template/src/models/options_fix.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends OptionsFix<$2> {",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(super.config);"
			"  @override",
			"  Future<void> run(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    AnalysisError analysisError,",
			"    List<AnalysisError> others,",
			"  ) async {",
			"    context.registry.addMethodInvocation((node) {",
			"      // The method is not impacted by this analysis error",
			"      if (!node.sourceRange.intersects(analysisError.sourceRange)) return;",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        message: '${3:Add Widget Here}',",
			"        priority: 80,",
			"      );",
			"",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${4:// TODO: <implement change to refactor the code>}",
			"      });",
			"    });",
			"  }",
			"}",
		],
	},
	"options": {
		"scope": "dart",
		"prefix": "options",
		"description": "Dart Custom Lint Options",
		"body": [
			"import 'package:analyzer/error/error.dart';",
			"import 'package:custom_lints_template/src/models/hooks/error_severity_hook.dart';",
			"import 'package:custom_lints_template/src/models/hooks/map_or_list_hook.dart';",
			"import 'package:dart_mappable/dart_mappable.dart';",
			"",
			"part '${1:${TM_FILENAME_BASE}}.mapper.dart';",
			"",
			"@MappableClass(caseStyle: CaseStyle.snakeCase, hook: MapOrListHook())",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}",
			"    with ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Mappable {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({",
			"    this.severity,",
			"  });",
			"",
			"  @MappableField(hook: ErrorSeverityHook())",
			"  final ErrorSeverity? severity;",
			"",
			"  static const fromJson = ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Mapper.fromJson;",
			"  static const fromMap = ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Mapper.fromMap;",
			"}",
			""
		],
	},
}