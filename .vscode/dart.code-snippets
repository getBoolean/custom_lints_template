{
	// Place your custom_lints_template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"lint": {
		"scope": "dart",
		"prefix": "lint",
		"description": "Dart Custom Lint Definition",
		"body": [
			"import 'package:analyzer/error/listener.dart';",
			"import 'package:custom_lints_template/src/options.dart';",
			"import 'package:custom_lints_template/src/options_plugin_base.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Rule extends OptionsLintRule {",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Rule() : super(code: _code);",
			"",
			"  static const _code = LintCode(",
			"    name: '${1:${TM_FILENAME_BASE}}',",
			"    problemMessage: '${2:This is the description of our custom lint}',",
			"  );",
			"",
			"  @override",
			"  Future<void> runWithOptions(",
			"    CustomLintResolver resolver,",
			"    ErrorReporter reporter,",
			"    CustomLintContext context,",
			"    Options options,",
			"  ) async {",
			"    // if (options.rules.${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}.shouldSkipFile(resolver.path)) {",
			"    //   return;",
			"    // }",
			"",
			"    // final severity = options.rules.${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}.severity;",
			"    // final code = this.code.copyWith(errorSeverity: severity);",
			"    context.registry.addVariableDeclaration((node) {",
			"      ${3:// TODO: Check if the error should be reported}",
			"      reporter.reportErrorForNode(code, node);",
			"    });",
			"  }",
			"",
			"  @override",
			"  List<Fix> getFixes() => [];",
			"}",
			""
		],
	},
	"assist": {
		"scope": "dart",
		"prefix": "assist",
		"description": "Dart Custom Lint Assist",
		"body": [
			"import 'package:analyzer/source/source_range.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"import 'package:custom_lints_template/src/options.dart';",
			"import 'package:custom_lints_template/src/options_plugin_base.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Assist extends OptionsAssist {",
			"  @override",
			"  Future<void> runWithOptions(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    SourceRange target,",
			"    Options options,",
			"  ) async {",
			"    context.registry.addVariableDeclaration((node) {",
			"      // Check that the visited node is under the cursor",
			"      if (!target.intersects(node.sourceRange)) return;",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        priority: 1,",
			"        message: '${2:Custom fix for code}',",
			"      );",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${3:// TODO: <implement change to refactor the code>}",
			"      });",
			"    });",
			"  }",
			"}",
			""
		],
	},
	"fix": {
		"scope": "dart",
		"prefix": "fix",
		"description": "Dart Custom Lint Fix",
		"body": [
			"import 'package:analyzer/error/error.dart';",
			"import 'package:custom_lint_builder/custom_lint_builder.dart';",
			"import 'package:custom_lints_template/src/options.dart';",
			"import 'package:custom_lints_template/src/options_plugin_base.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Fix extends OptionsFix {",
			"  @override",
			"  Future<void> runWithOptions(",
			"    CustomLintResolver resolver,",
			"    ChangeReporter reporter,",
			"    CustomLintContext context,",
			"    AnalysisError analysisError,",
			"    List<AnalysisError> others,",
			"    Options options,",
			"  ) async {",
			"    context.registry.addMethodInvocation((node) {",
			"      // The method is not impacted by this analysis error",
			"      if (!node.sourceRange.intersects(analysisError.sourceRange)) return;",
			"",
			"      final changeBuilder = reporter.createChangeBuilder(",
			"        message: '${2:Add Widget Here}',",
			"        priority: 80,",
			"      );",
			"",
			"      changeBuilder.addDartFileEdit((builder) {",
			"        ${3:// TODO: <implement change to refactor the code>}",
			"      });",
			"    });",
			"  }",
			"}",
		],
	},
	"option": {
		"scope": "dart",
		"prefix": "option",
		"description": "Dart Custom Lint Option",
		"body": [
			"import 'package:analyzer/error/error.dart';",
			"import 'package:custom_lints_template/src/options.dart';",
			"import 'package:custom_lints_template/src/options/hooks/error_severity_hook.dart';",
			"import 'package:custom_lints_template/src/options/hooks/map_or_list_hook.dart';",
			"import 'package:dart_mappable/dart_mappable.dart';",
			"",
			"part '${1:${TM_FILENAME_BASE}}.mapper.dart';",
			"",
			"@MappableClass(caseStyle: CaseStyle.snakeCase, hook: MapOrListHook())",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Option",
			"    with ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}OptionMappable, OptionsMixin {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Option({",
			"    this.exclude = const [],",
			"    this.include = const [],",
			"    this.severity = ErrorSeverity.WARNING,",
			"  });",
			"",
			"  @override",
			"  final List<String> exclude;",
			"",
			"  @override",
			"  final List<String> include;",
			"",
			"  @MappableField(hook: ErrorSeverityHook())",
			"  final ErrorSeverity severity;",
			"",
			"  static const fromJson = ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}OptionMapper.fromJson;",
			"  static const fromMap = ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}OptionMapper.fromMap;",
			"}",
			""
		],
	},
}